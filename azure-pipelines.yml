trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

jobs:
- job: TestWindows
  pool: 
    vmImage: windows-2019
  steps:
  - checkout: none
  - bash: |
      curl -sSL https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-wincred-v0.6.3-amd64.zip -o docker-credential-wincred.zip
      unzip docker-credential-wincred.zip
      mkdir -p /usr/bin
      mv docker-credential-wincred.exe /usr/bin
      mkdir -p "$USERPROFILE"/.docker"
      echo '{"credsStore":"wincred"}' > "$USERPROFILE"/.docker/config.json"
    displayName: Configure wincred
  - bash: |
      rm /c/ProgramData/Git/config
      git config --global core.autcrlf false
      git clone https://github.com/michaelperel/docker-lock.git
    displayName: Clone docker-lock
  - bash: |
      cd docker-lock
      pwd
      ls -al
      ./integration_tests/integration_tests.sh
    displayName: Run Integration Tests
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)
      ACR_USERNAME: $(ACR_USERNAME)
      ACR_PASSWORD: $(ACR_PASSWORD)
      ACR_REGISTRY_NAME: $(ACR_REGISTRY_NAME)
  - bash: |
      cd docker-lock
      # run without -race, because it requires gcc
      go test ./...
    displayName: Run tests

- job: TestMacOS
  pool:
    vmImage: macOS-10.14
  steps:
  - bash: |
      mkdir homebrew
      curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew
      brew install docker-credential-helper
      brew install docker
      mkdir -p ""$HOME"/.docker"
      echo '{"credsStore":"osxkeychain"}' > ""$HOME"/.docker/config.json"
    displayName: Configure osxkeychain
  - bash: go test -race ./...
    displayName: Run tests
  - bash: ./integration_tests/integration_tests.sh
    displayName: Run Integration Tests
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)
      ACR_USERNAME: $(ACR_USERNAME)
      ACR_PASSWORD: $(ACR_PASSWORD)
      ACR_REGISTRY_NAME: $(ACR_REGISTRY_NAME)

- job: TestLinux
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: go test -race ./...
    displayName: Run tests
  - bash: ./integration_tests/integration_tests.sh
    displayName: Run Integration Tests
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)
      ACR_USERNAME: $(ACR_USERNAME)
      ACR_PASSWORD: $(ACR_PASSWORD)
      ACR_REGISTRY_NAME: $(ACR_REGISTRY_NAME)

- job: Build
  dependsOn:
  - TestWindows
  - TestMacOS
  - TestLinux
  condition: and(succeeded('TestWindows'), succeeded('TestMacOS'), succeeded('TestLinux'))
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: GOOS=linux GOARCH=amd64 go build -o docker-lock-linux
    displayName: Build linux
  - bash: GOOS=darwin GOARCH=amd64 go build -o docker-lock-mac
    displayName: Build mac
  - bash: GOOS=windows GOARCH=amd64 go build -o docker-lock-windows.exe
    displayName: Build windows
  - publish: $(System.DefaultWorkingDirectory)/docker-lock-linux
    artifact: docker-lock-linux
    displayName: Publish docker-lock-linux
  - publish: $(System.DefaultWorkingDirectory)/docker-lock-mac
    artifact: docker-lock-mac
    displayName: Publish docker-lock-mac
  - publish: $(System.DefaultWorkingDirectory)/docker-lock-windows.exe
    artifact: docker-lock-windows
    displayName: Publish docker-lock-windows

# create a release by pushing a semver git tag such as v0.0.1 
- job: Release
  dependsOn: Build
  condition: succeeded()
  pool:
    vmImage: ubuntu-18.04
  steps:
  - download: current
    artifact: docker-lock-linux
    displayName: Download docker-lock-linux
  - download: current
    artifact: docker-lock-mac
    displayName: Download docker-lock-mac
  - download: current
    artifact: docker-lock-windows
    displayName: Download docker-lock-windows
  - task: GithubRelease@0 
    displayName: Create github release
    inputs:
      gitHubConnection: docker-lock-release
      repositoryName: michaelperel/docker-lock
      assets: |
        $(Pipeline.Workspace)/docker-lock-linux/docker-lock-linux
        $(Pipeline.Workspace)/docker-lock-mac/docker-lock-mac
        $(Pipeline.Workspace)/docker-lock-windows/docker-lock-windows.exe