trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

schedules:
- cron: "0 4 * * *"
  displayName: "Daily build at midnight EDT"
  branches:
    include:
    - master
  always: true

jobs:
- job: Lint
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: docker build -t devcontainer ./.devcontainer
    displayName: Build Dev Container

  - bash: docker run -v "${PWD}:/app" devcontainer /app/scripts/lint.sh
    displayName: Run linters

- job: Build
  dependsOn: Lint
  condition: succeeded()
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: |
      set -euo pipefail
      curl -fsSL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | bash
      sudo mv ./bin/goreleaser /usr/local/bin
    displayName: Install goreleaser
  - bash: |
      set -euo pipefail
      goreleaser build --snapshot
    displayName: Build all architectures and operating systems

  - publish: "$(System.DefaultWorkingDirectory)/dist/docker-lock_linux_amd64/docker-lock"
    artifact: docker-lock_linux_amd64
    displayName: Publish docker-lock_linux_amd64

  - publish: "$(System.DefaultWorkingDirectory)/dist/docker-lock_darwin_amd64/docker-lock"
    artifact: docker-lock_darwin_amd64
    displayName: Publish docker-lock_darwin_amd64

  - publish: "$(System.DefaultWorkingDirectory)/dist/docker-lock_windows_amd64/docker-lock.exe"
    artifact: docker-lock_windows_amd64
    displayName: Publish docker-lock_windows_amd64

- job: TestWindows
  dependsOn: Build
  condition: succeeded()
  variables:
    WINCRED_VERSION: '0.6.3'
  pool: 
    vmImage: windows-2019
  steps:
  - bash: find . -type f -print0 | xargs -0 dos2unix
    displayName: Convert CLRF to LF

  - bash: |
      set -euo pipefail
      curl -sSL "https://github.com/docker/docker-credential-helpers/releases/download/v$(WINCRED_VERSION)/docker-credential-wincred-v$(WINCRED_VERSION)-amd64.zip" -o docker-credential-wincred.zip
      unzip docker-credential-wincred.zip
      mkdir -p /usr/bin
      mv docker-credential-wincred.exe /usr/bin
      mkdir -p "${USERPROFILE}/.docker"
      echo '{"credsStore":"wincred"}' > "${USERPROFILE}/.docker/config.json"
    displayName: Configure wincred

  - bash: |
      set -euo pipefail
      # run without -race, because it requires gcc
      go test ./...
    displayName: Run unit tests

  - download: current
    artifact: docker-lock_windows_amd64
    displayName: Download docker-lock_windows_amd64

  - script: |
      # $(Pipeline.Workspace) git bash bug, using cmd as workaround
      move "$(Pipeline.Workspace)\docker-lock_windows_amd64\docker-lock.exe" docker-lock.exe
    displayName: Move artifact to current directory

  - bash: |
      set -euo pipefail
      chmod +x docker-lock.exe
      mkdir -p "${USERPROFILE}/.docker/cli-plugins/"
      mv docker-lock.exe "${USERPROFILE}/.docker/cli-plugins/"
      ./test/registry/firstparty/tests.sh windows
      ./test/registry/contrib/tests.sh
      ./test/demo-app/tests.sh
    displayName: Run Integration Tests

    env:
      DOCKER_USERNAME: "$(DOCKER_USERNAME)"
      DOCKER_PASSWORD: "$(DOCKER_PASSWORD)"
      ACR_USERNAME: "$(ACR_USERNAME)"
      ACR_PASSWORD: "$(ACR_PASSWORD)"
      ACR_REGISTRY_NAME: "$(ACR_REGISTRY_NAME)"

- job: TestMacOS
  dependsOn: Build
  condition: succeeded()
  variables:
    OSXKEYCHAIN_VERSION: '0.6.3'
    DOCKER_VERSION: '19.03.9'
  pool:
    vmImage: macOS-10.14
  steps:
  - bash: |
      set -euo pipefail
      curl -fsSL "https://github.com/docker/docker-credential-helpers/releases/download/v$(OSXKEYCHAIN_VERSION)/docker-credential-osxkeychain-v$(OSXKEYCHAIN_VERSION)-amd64.tar.gz" | gunzip | tar xopf -
      mv docker-credential-osxkeychain /usr/local/bin
      # docker cli does not come installed by default on the build agent
      curl -fsSL "https://download.docker.com/mac/static/stable/x86_64/docker-$(DOCKER_VERSION).tgz" | gunzip | tar xopf -
      mv docker/docker /usr/local/bin
      mkdir -p "${HOME}/.docker"
      echo '{"credsStore":"osxkeychain"}' > "${HOME}/.docker/config.json"
    displayName: Configure osxkeychain

  - bash: |
      set -euo pipefail
      ./scripts/unittest.sh
    displayName: Run unit tests

  - download: current
    artifact: docker-lock_darwin_amd64
    displayName: Download docker-lock_darwin_amd64

  - bash: |
      set -euo pipefail
      mv "$(Pipeline.Workspace)/docker-lock_darwin_amd64/docker-lock" docker-lock
      chmod +x docker-lock
      mkdir -p "${HOME}/.docker/cli-plugins/"
      mv docker-lock "${HOME}/.docker/cli-plugins/"
      export PATH="/usr/local/opt/gettext/bin:${PATH}"
      ./test/registry/firstparty/tests.sh mac
      ./test/registry/contrib/tests.sh
      ./test/demo-app/tests.sh
    displayName: Run Integration Tests

    env:
      DOCKER_USERNAME: "$(DOCKER_USERNAME)"
      DOCKER_PASSWORD: "$(DOCKER_PASSWORD)"
      ACR_USERNAME: "$(ACR_USERNAME)"
      ACR_PASSWORD: "$(ACR_PASSWORD)"
      ACR_REGISTRY_NAME: "$(ACR_REGISTRY_NAME)"

- job: TestLinux
  dependsOn: Build
  condition: succeeded()
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: |
      set -euo pipefail
      ./scripts/unittest.sh
    displayName: Run unit tests

  - download: current
    artifact: docker-lock_linux_amd64
    displayName: Download docker-lock_linux_amd64

  - bash: |
      set -euo pipefail
      mv "$(Pipeline.Workspace)/docker-lock_linux_amd64/docker-lock" docker-lock
      chmod +x docker-lock
      mkdir -p "${HOME}/.docker/cli-plugins/"
      mv docker-lock "${HOME}/.docker/cli-plugins/"
      ./test/registry/firstparty/tests.sh linux
      ./test/registry/contrib/tests.sh
      ./test/demo-app/tests.sh
    displayName: Run Integration Tests

    env:
      DOCKER_USERNAME: "$(DOCKER_USERNAME)"
      DOCKER_PASSWORD: "$(DOCKER_PASSWORD)"
      ACR_USERNAME: "$(ACR_USERNAME)"
      ACR_PASSWORD: "$(ACR_PASSWORD)"
      ACR_REGISTRY_NAME: "$(ACR_REGISTRY_NAME)"

# create a release by pushing a semver git tag such as v0.0.1 
- job: Release
  dependsOn:
  - TestWindows
  - TestMacOS
  - TestLinux
  condition: and(succeeded('TestWindows'), succeeded('TestMacOS'), succeeded('TestLinux'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: |
      set -euo pipefail
      latest_tag="$(git tag -l | tail -n 1)"
      latest_tag="${latest_tag/v}"
      if ! curl -fsSL "https://github.com/safe-waters/docker-lock/releases/download/v${latest_tag}/docker-lock_${latest_tag}_Linux_x86_64.tar.gz" -o /dev/null; then
        curl -fsSL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | bash
        sudo mv ./bin/goreleaser /usr/local/bin
        goreleaser
      else
        echo "Skipping release because latest tag: ${latest_tag} already exists."
      fi
    displayName: Release if tag does not exist
    env: "$(GITHUB_TOKEN)"
