name: CI

on:
  push:
    branches: [ 'miperel/gh-actions' ]
  pull_request:
    branches: [ master ]

jobs:
  dev-container:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build dev container
        run: docker build -t devcontainer ./.devcontainer
        shell: bash

      - name: Make
        run: docker run -v "${PWD}:/workspaces/docker-lock" devcontainer make lint install unittest
        shell: bash

  all-hosts:
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install Mac Prerequisites
        run: |
          set -euo pipefail
          curl -fsSL "https://github.com/docker/docker-credential-helpers/releases/download/v$(OSXKEYCHAIN_VERSION)/docker-credential-osxkeychain-v$(OSXKEYCHAIN_VERSION)-amd64.tar.gz" | gunzip | tar xopf -
          mv docker-credential-osxkeychain /usr/local/bin
          # docker cli does not come installed by default on the build agent
          curl -fsSL "https://download.docker.com/mac/static/stable/x86_64/docker-$(DOCKER_VERSION).tgz" | gunzip | tar xopf -
          mv docker/docker /usr/local/bin
          mkdir -p "${HOME}/.docker"
          echo '{"credsStore":"osxkeychain"}' > "${HOME}/.docker/config.json"
        shell: bash
        if: matrix.os == 'macos-10.15'

      - name: Install Windows Prerequisites
        run: |
          set -euo pipefail
          curl -fsSL "https://github.com/docker/docker-credential-helpers/releases/download/v$(WINCRED_VERSION)/docker-credential-wincred-v$(WINCRED_VERSION)-amd64.zip" -o docker-credential-wincred.zip
          unzip docker-credential-wincred.zip
          mkdir -p /usr/bin
          mv docker-credential-wincred.exe /usr/bin
          mkdir -p "${USERPROFILE}/.docker"
          echo '{"credsStore":"wincred"}' > "${USERPROFILE}/.docker/config.json"
          choco install -y mingw
        shell: bash
        if: matrix.os == 'windows-2019'

      - name: Make
        run: |
          set -euo pipefail
          make lint install unittest
        shell: bash
